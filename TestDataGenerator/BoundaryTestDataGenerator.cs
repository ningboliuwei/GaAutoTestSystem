using System.Collections.Generic;using System.Linq;namespace TestDataGenerator{    public class BoundaryTestDataGenerator    {        //得到边界测试数据集        public static List<AssertionInfo> GetAssertions(AbstractFunction function)        {            var boundaryValuesOfAllParas = function.Paras.Select(GetBoundaryValuesOfPara).ToList();            var middleValues = boundaryValuesOfAllParas.Select(v => v["middle"]).ToList();            var assertions = new List<AssertionInfo>();            for (var i = 0; i < boundaryValuesOfAllParas.Count; i++)            {                foreach (var value in boundaryValuesOfAllParas[i].Where(v => v.Key != "middle").Select(p => p).ToList())                {                    var assertion = new AssertionInfo();                    assertion.InputValues.AddRange(middleValues);                    assertion.InputValues[i] = value.Value;                    assertions.Add(assertion);                }            }            return assertions;        }        //根据参数得到相关的边界值测试数据        private static Dictionary<string, double> GetBoundaryValuesOfPara(ParaInfo para)        {            var step = para.DataType == ParaDataType.Double ? 0.1 : 1;            var values = new Dictionary<string, double>            {                {"lower-", para.LowerBound - step},                {"lower", para.LowerBound},                {"lower+", para.LowerBound + step},                {                    "middle",                    para.DataType == ParaDataType.Double                        ? (para.LowerBound + para.UpperBound) / 2                        : (int) (para.LowerBound + para.UpperBound) / 2                },                {"upper-", para.UpperBound - step},                {"upper", para.UpperBound},                {"upper+", para.UpperBound + step}            };            return values;        }    }}
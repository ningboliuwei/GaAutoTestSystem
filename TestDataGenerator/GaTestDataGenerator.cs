using System.Collections.Generic;using System.Diagnostics;using System.IO;using System.Linq;namespace TestDataGenerator{    public class GaTestDataGenerator    {        public static List<AssertionInfo> GetAssertions(GaParameterInfo gaParameters, AbstractFunction function,            List<string> targetPaths)        {            var assertions = new List<AssertionInfo>();            // 写文件的准备            const string logPath = @"c:\#GA_DEMO\galog.txt";            var writer = new StreamWriter(logPath);            var stopwatch = new Stopwatch();            stopwatch.Start();            foreach (var targetPath in targetPaths)            {                // 下面这句漏掉会出错！                function.TargetPath = targetPath;                //新建一个种群                var population = new Population(gaParameters, function);                //随机生成染色体                population.RandomGenerateChromosome();                for (var i = 0; i < gaParameters.GenerationQuantity; i++)                {                    var mostFittest = population.Chromosomes.First(c =>                        Equals(c.Fitness, population.Chromosomes.Max(n => n.Fitness)));                    #region 写文件操作                    const int width = -30;                    // 将当前代最优染色体信息写入文件                    var line =                        $"{$"value(s): {string.Join(" ", mostFittest.DecodedSubValues.ToArray())}",width} | {$"target path: {function.TargetPath}",width} | {$"execution path: {mostFittest.ExecutionPath}",width} | {$"fitness: {mostFittest.Fitness}",width} | {$"result: {mostFittest.Result}",width}";                    writer.WriteLine(line);                    // 以上为写文件操作                    #endregion                    //以下为终止条件                    if (mostFittest.ExecutionPath == targetPath)                    {                        //将找到的数据添加到测试数据集中                        var assertion = new AssertionInfo();                        assertion.InputValues.AddRange(mostFittest.DecodedSubValues.Select(v => v).ToList());                        //                        assertions.Add(assertion);                        //                        txtResult.AppendText("---------------FOUND--------------\n");                        writer.WriteLine("-----------------FOUND-----------------");                        break;                    }                    //进化                    population.Evolve(gaParameters.SelectionType);                }            }            stopwatch.Stop();            writer.WriteLine($"total time cost: {stopwatch.ElapsedMilliseconds}ms");            writer.Close();            return assertions;        }    }}